from .models import Notification, NotificationPreference
from django.contrib.auth import get_user_model
from django.db import transaction
from django.utils import timezone

User = get_user_model()

class NotificationService:
    """Service centralis√© pour la gestion des notifications"""
    
    @staticmethod
    def create_notification(user, title, message, notification_type, category, 
                          related_card_id=None, related_request_id=None, 
                          action_url=None, is_important=False):
        """Cr√©er une nouvelle notification"""
        
        # V√©rifier les pr√©f√©rences utilisateur
        preferences, created = NotificationPreference.objects.get_or_create(user=user)
        
        # V√©rifier si cette cat√©gorie est activ√©e
        category_enabled = getattr(preferences, f"{category}_enabled", True)
        if not category_enabled:
            return None
        
        with transaction.atomic():
            notification = Notification.objects.create(
                user=user,
                title=title,
                message=message,
                notification_type=notification_type,
                category=category,
                related_card_id=related_card_id,
                related_request_id=related_request_id,
                action_url=action_url,
                is_important=is_important
            )
        
        return notification
    
    @staticmethod
    def notify_card_creation(user, card):
        """Notification lors de la cr√©ation d'une carte"""
        return NotificationService.create_notification(
            user=user,
            title="üéâ Nouvelle carte virtuelle cr√©√©e",
            message=f"Votre carte virtuelle '{card.card_name}' a √©t√© cr√©√©e avec succ√®s.",
            notification_type="success",
            category="card_creation",
            related_card_id=card.id,
            action_url="/user-dashboard"
        )
    
    @staticmethod
    def notify_card_approval(user, card):
        """Notification lors de l'approbation d'une carte"""
        return NotificationService.create_notification(
            user=user,
            title="‚úÖ Demande de carte approuv√©e",
            message=f"F√©licitations ! Votre demande pour la carte '{card.card_name}' a √©t√© approuv√©e. Votre carte virtuelle est maintenant active.",
            notification_type="success",
            category="card_approval",
            related_card_id=card.id,
            action_url="/user-dashboard",
            is_important=True
        )
    
    @staticmethod
    def notify_card_rejection(user, request, reason=""):
        """Notification lors du rejet d'une carte"""
        message = f"Votre demande pour la carte '{request.card_name}' a √©t√© rejet√©e."
        if reason:
            message += f" Raison: {reason}"
        
        return NotificationService.create_notification(
            user=user,
            title="‚ùå Demande de carte rejet√©e",
            message=message,
            notification_type="error",
            category="card_rejection",
            related_request_id=request.id,
            action_url="/user-dashboard",
            is_important=True
        )
    
    @staticmethod
    def notify_card_activation(user, card):
        """Notification lors de l'activation d'une carte"""
        return NotificationService.create_notification(
            user=user,
            title="üü¢ Carte activ√©e",
            message=f"Votre carte '{card.card_name}' a √©t√© activ√©e avec succ√®s.",
            notification_type="success",
            category="card_activation",
            related_card_id=card.id,
            action_url="/user-dashboard"
        )
    
    @staticmethod
    def notify_card_deactivation(user, card):
        """Notification lors de la d√©sactivation d'une carte"""
        return NotificationService.create_notification(
            user=user,
            title="üî¥ Carte d√©sactiv√©e",
            message=f"Votre carte '{card.card_name}' a √©t√© d√©sactiv√©e.",
            notification_type="warning",
            category="card_deactivation",
            related_card_id=card.id,
            action_url="/user-dashboard"
        )
    
    @staticmethod
    def notify_document_upload(user, document_type):
        """Notification lors du t√©l√©chargement de documents"""
        return NotificationService.create_notification(
            user=user,
            title="üìÑ Document t√©l√©charg√©",
            message=f"Votre {document_type} a √©t√© t√©l√©charg√© avec succ√®s.",
            notification_type="info",
            category="document_upload",
            action_url="/user-dashboard"
        )
    
    # Notifications pour les administrateurs
    
    @staticmethod
    def notify_admin_new_request(request):
        """Notifier les admins d'une nouvelle demande"""
        admins = User.objects.filter(user_type='admin')
        
        notifications = []
        for admin in admins:
            notification = NotificationService.create_notification(
                user=admin,
                title="üÜï Nouvelle demande de carte",
                message=f"Une nouvelle demande de carte '{request.card_name}' a √©t√© soumise par {request.user.get_full_name() or request.user.username}.",
                notification_type="info",
                category="new_request",
                related_request_id=request.id,
                action_url="/card-management",
                is_important=True
            )
            if notification:
                notifications.append(notification)
        
        return notifications
    
    @staticmethod
    def notify_admin_card_action(admin_user, action, card, user):
        """Notifier les admins d'une action sur une carte"""
        action_messages = {
            'approved': f"La demande de carte '{card.card_name}' de {user.get_full_name() or user.username} a √©t√© approuv√©e.",
            'rejected': f"La demande de carte '{card.card_name}' de {user.get_full_name() or user.username} a √©t√© rejet√©e.",
            'activated': f"La carte '{card.card_name}' de {user.get_full_name() or user.username} a √©t√© activ√©e.",
            'deactivated': f"La carte '{card.card_name}' de {user.get_full_name() or user.username} a √©t√© d√©sactiv√©e."
        }
        
        return NotificationService.create_notification(
            user=admin_user,
            title=f"üîß Action administrative: {action}",
            message=action_messages.get(action, f"Action {action} effectu√©e sur la carte."),
            notification_type="info",
            category="system",
            related_card_id=card.id,
            action_url="/card-management"
        )
    
    @staticmethod
    def notify_admin_document_received(admin_user, user, document_type):
        """Notifier les admins de la r√©ception de documents"""
        return NotificationService.create_notification(
            user=admin_user,
            title="üìã Nouveau document re√ßu",
            message=f"{user.get_full_name() or user.username} a t√©l√©charg√© un {document_type}.",
            notification_type="info",
            category="document_upload",
            action_url="/card-management"
        )
    
    @staticmethod
    def get_unread_count(user):
        """Obtenir le nombre de notifications non lues"""
        return Notification.objects.filter(user=user, is_read=False).count()
    
    @staticmethod
    def mark_all_as_read(user):
        """Marquer toutes les notifications comme lues"""
        return Notification.objects.filter(user=user, is_read=False).update(
            is_read=True,
            read_at=timezone.now()
        )
